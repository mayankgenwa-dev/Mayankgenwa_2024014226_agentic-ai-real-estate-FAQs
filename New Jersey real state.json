{
  "name": "New Jersey real state",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -192,
        -16
      ],
      "id": "c719b3ee-d0b2-405f-a9c1-96470fd9a0ce",
      "name": "When chat message received",
      "webhookId": "3345e437-dc81-46ad-b52c-0792fa26fb0f"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "46979aaa-92a3-4426-88d7-2c1bfd891727",
              "name": "question",
              "value": "\"What is the average home price in Hoboken?\"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -32,
        -16
      ],
      "id": "90a1fb55-c656-4a69-b2bb-4f9993764ed8",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash-lite-preview-06-17",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash-lite-preview-06-17"
        },
        "messages": {
          "values": [
            {
              "content": "=Classify the following question into one of these categories:\n- pricing\n- mortgage\n- school\n- regulation\n- trend\n\nOnly return the category name. No explanation.\n\nQuestion: {{ $json[\"question\"] }}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        176,
        -16
      ],
      "id": "23863290-c82c-4872-ac66-608792e57a0a",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {
          "id": "mABp4vyYrw7w397J",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f4dc0d60-b4e6-4c7d-a392-14a13a69b3cf",
              "name": "intent",
              "value": "={{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        528,
        -16
      ],
      "id": "13cf0fa6-e76c-4593-ad20-9e88fac36b5c",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json[\"intent\"] }}",
                    "rightValue": "pricing",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "d947ff50-d8fd-455a-866d-fe5bbc4ad686"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3e7e14fc-93ae-4d65-a8f0-a7dfead15eef",
                    "leftValue": "={{ $json[\"intent\"] }}",
                    "rightValue": "mortgage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "486e879f-6603-4caf-86e2-6d4050f943c7",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "school",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fd6897a-c742-4527-a8c6-e8570f9daadc",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "regulation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7202af06-e7c6-4f52-b49b-f0ef73df4f0a",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "trend",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        736,
        -64
      ],
      "id": "8490dbd1-0fa0-4703-93ab-51d5bc78e09e",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "name contains '.csv'",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        976,
        -80
      ],
      "id": "7626e46f-88c2-4912-992c-a37860b81c09",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "4ojNWihJtZ9zIH5k",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1216,
        -80
      ],
      "id": "d0bd037d-a07c-4260-99b4-18e97a8ccd27",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1424,
        -96
      ],
      "id": "6cd54c8f-ef37-4e26-8872-6f82f42f9735",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "4ojNWihJtZ9zIH5k",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1632,
        -96
      ],
      "id": "514eec91-036b-4ed1-ae38-00778434acbf",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// 1. Access all rows parsed from the *current* CSV file.\n//    'items' is a global variable in n8n's Code node that holds the input items.\nconst currentCsvRows = items.map(item => item.json);\n\n// 2. Access original context (user question, intent, entities).\n//    These variables ($input.all()[0].json.variableName) access data that should\n//    be consistently passed from the beginning of your workflow (from the trigger)\n//    and through the 'Loop Over Items' node.\nconst originalQuestion = items[0].json.originalQuestion;\nconst conversationId = items[0].json.conversationId;\nconst intent = items[0].json.intent;       // e.g., \"pricing_query\", \"property_details\", \"school_info\"\nconst entities = items[0].json.entities;   // e.g., { city: \"Hoboken\", address: \"123 Main St\" }\n\n// Initialize a variable to store the summary for this file.\n// This will be populated based on the user's intent and the data found.\nlet processedDataSummaryForThisFile = \"No specific data found in this file for your query.\";\n\n// 3. Implement conditional logic based on 'intent' and 'entities'.\n\n// --- Example 1: Handling a 'pricing_query' intent ---\nif (intent === \"pricing_query\" && entities && entities.city) {\n    const targetCity = entities.city.toLowerCase();\n    // Filter rows for the target city and ensure 'Price' is a valid number.\n    const cityProperties = currentCsvRows.filter(row =>\n        row.City && row.City.toLowerCase() === targetCity && !isNaN(parseFloat(row.Price))\n    );\n\n    if (cityProperties.length > 0) {\n        // Calculate average price.\n        const totalPrices = cityProperties.reduce((sum, row) => sum + parseFloat(row.Price), 0);\n        const averagePrice = totalPrices / cityProperties.length;\n        processedDataSummaryForThisFile = `From this file, for ${entities.city}, based on ${cityProperties.length} properties: Average price is $${averagePrice.toFixed(2)}.`;\n    } else {\n        processedDataSummaryForThisFile = `No property data for ${entities.city} found in this specific CSV file.`;\n    }\n}\n\n// --- Example 2: Handling a 'property_details' intent by address ---\nelse if (intent === \"property_details\" && entities && entities.address) {\n    const targetAddress = entities.address.toLowerCase();\n    // Find a property matching the address.\n    const propertyDetail = currentCsvRows.find(row =>\n        row.Address && row.Address.toLowerCase().includes(targetAddress)\n    );\n\n    if (propertyDetail) {\n        processedDataSummaryForThisFile = `Details from this file for ${propertyDetail.Address}: Price: $${propertyDetail.Price || 'N/A'}, Beds: ${propertyDetail.Beds || 'N/A'}, Baths: ${propertyDetail.Baths || 'N/A'}, Property Type: ${propertyDetail.PropertyType || 'N/A'}. Year Built: ${propertyDetail.YearBuilt || 'N/A'}.`;\n    } else {\n        processedDataSummaryForThisFile = `Could not find property details for ${entities.address} in this specific CSV file.`;\n    }\n}\n\n// --- Example 3: Handling 'school_info' intent ---\nelse if (intent === \"school_info\" && entities && entities.school_name) {\n    const targetSchool = entities.school_name.toLowerCase();\n    const schoolInfo = currentCsvRows.find(row =>\n        row.SchoolName && row.SchoolName.toLowerCase().includes(targetSchool)\n    );\n\n    if (schoolInfo) {\n        processedDataSummaryForThisFile = `From this file, details for ${schoolInfo.SchoolName}: Rating: ${schoolInfo.Rating || 'N/A'}, Students: ${schoolInfo.Students || 'N/A'}, District: ${schoolInfo.SchoolDistrict || 'N/A'}.`;\n    } else {\n        processedDataSummaryForThisFile = `No information found for school \"${entities.school_name}\" in this specific CSV file.`;\n    }\n}\n\n// IMPORTANT: Add more 'else if' blocks here for other intents you want to handle.\n// Make sure to adjust property names (e.g., 'Address', 'Beds', 'Baths', 'PropertyType', 'YearBuilt', 'SchoolName', 'Rating', 'SchoolDistrict')\n// based on the actual column headers in your CSV files.\n\n// 4. Output the summarized data for this file.\n//    This node will output *one item* for *each* CSV file it processes,\n//    containing the summary for that specific file.\nreturn [{\n    json: {\n        originalQuestion: originalQuestion,\n        conversationId: conversationId,\n        processedDataChunk: processedDataSummaryForThisFile, // Summary specific to THIS file\n        intent: intent,\n        entities: entities\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        -96
      ],
      "id": "75240b1b-5e94-4ce4-a75e-36fc2ca20588",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        -272
      ],
      "id": "15239cab-ee06-4a91-8038-13b8678c49d2",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [],
        []
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f565c531-74aa-4011-97ac-764813e2e76a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "95bbc74a0f850893311b47775938a3c748b77e33d3ba30ada5f84ae82d3e4680"
  },
  "id": "O1rHS5mcXWjNjSFb",
  "tags": []
}